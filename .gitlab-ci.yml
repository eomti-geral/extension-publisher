stages:
  - build
  - test
  - test-ci-cd
  - deploy

variables:
  NODE_ENV: production

default:
  image: node:22

before_script:
  - corepack enable
  - corepack prepare pnpm@latest --activate
  - pnpm install

build:
  stage: build
  script:
    - echo "Build iniciado com Node.js $(node -v)"
    - pnpm build
    - echo "Build concluído"

test:
  stage: test
  needs: [build]
  parallel:
    matrix:
      - NODE_VERSION: "22"
      - NODE_VERSION: "20"
      - NODE_VERSION: "18"
  image: node:${NODE_VERSION}
  script:
    - echo "Rodando testes em Node.js $NODE_VERSION"
    - pnpm test

test-ci-cd:
  stage: test-ci-cd
  needs: [test]
  image: node:20
  variables:
    GOOGLE_CLOUD_API_REFRESH_TOKEN: "$GOOGLE_CLOUD_API_REFRESH_TOKEN"
    GOOGLE_CLOUD_API_CLIENT_SECRET: "$GOOGLE_CLOUD_API_CLIENT_SECRET"
    GOOGLE_CLOUD_API_CLIENT_ID: "$GOOGLE_CLOUD_API_CLIENT_ID"
    EXTENSION_ARTIFACT_ID: "$EXTENSION_ARTIFACT_ID"
  script:
    - echo "Rodando testes pré deploy CI/CD em Node.js 20"
    - pnpm test:ci-cd

deploy:
  stage: deploy
  needs: [test-ci-cd]
  variables:
    GOOGLE_CLOUD_API_REFRESH_TOKEN: "$GOOGLE_CLOUD_API_REFRESH_TOKEN"
    GOOGLE_CLOUD_API_CLIENT_SECRET: "$GOOGLE_CLOUD_API_CLIENT_SECRET"
    GOOGLE_CLOUD_API_CLIENT_ID: "$GOOGLE_CLOUD_API_CLIENT_ID"
    EXTENSION_ARTIFACT_ID: "$EXTENSION_ARTIFACT_ID"
    #EXTENSION_PROJECT_FOLDER=..\..\

  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_COMMIT_TAG'
      when: always
    - when: never

  script:
    # para produção
    # - echo "Iniciando deploy..."
    # - pnpm deploy

    # para desenvolvimento modo no project
    # - echo "Iniciando deploy em modo no-project..."
    # - pnpm bundle
    # - pnpm deploy:no-project

    # para desenvolvimento sem enviar para publicação
    - echo "Iniciando deploy em modo no-project e no-publish..."
    - pnpm bundle
    - pnpm esno ./src/deploy.ts --verbose --no-project --no-publish
    
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_COMMIT_TAG'
      when: always
    - when: never
